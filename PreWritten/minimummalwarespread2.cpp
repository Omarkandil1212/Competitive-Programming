#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

int mn(int a, int b){
    if (a<b)return a;
    return b;
}

pair<int,int> dfs(vector<vector<int>>& gr, int ind, vector<bool>&vis, int inf,int tim,vector<int>& dt, vector<int>& hs,int p,vector<int>& nmgd,vector<bool>& infected,vector<int> & nminf){
    vis[ind]=true;
    if (infected[ind]) inf++;
    nminf[ind]=inf;
    dt[ind]=tim;
    tim++;
    hs[ind]=tim-1;
    int children=0;
    bool dn=false;
    int v1,v2;
    pair<int,int> par;
    for(int i=0;i<gr[ind].size();i++){
        if (gr[ind][i]==p) continue;
        children++;
        if (!vis[gr[ind][i]]){
            par=dfs(gr,gr[ind][i],vis,inf,tim,dt,hs,ind,nmgd,infected,nminf);
            tim=par.first;
            inf=par.second;
            hs[ind]=mn(hs[ind],hs[gr[ind][i]]);
            if (hs[gr[ind][i]]>=dt[ind]&& p!=-1 && infected[ind]){ // doesnt apply to root
                dn=true; // dn just to add it one time not repeatedly
                if (inf==nminf[gr[ind][i]]&&!infected[gr[ind][i]]){
                    nmgd[ind]+=(tim-dt[gr[ind][i]]);
                }
                
            }
            if (p==-1 && infected[ind]){
               if (inf==nminf[gr[ind][i]] && !infected[gr[ind][i]]){
                    nmgd[ind]+=(tim-dt[gr[ind][i]]);
                }
            }
        }
        hs[ind]=mn(hs[ind],dt[gr[ind][i]]);
    }
    if (p==-1 && children<2) nmgd[ind]=0;
    return {tim,inf};
}


int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int n = graph.size();
    vector<bool> vis={};
    vector<bool> infected(n,false);
    vector<vector<int>> gr={};
    int ans=initial[0];
    for(int i=0;i<n;i++){
        gr.push_back({});
        vis.push_back(false);
    }
    for(int i=0;i<initial.size();i++){ 
        infected[initial[i]]=true;
        if (initial[i]<ans)ans=initial[i];
    }
    for(int i=0;i<graph.size();i++){
        for(int j=0;j<n;j++){
            if (i!=j && graph[i][j]==1)gr[i].push_back(j);
        }
    }
    vector<int> art={},disc(n,0),highsen(n,0),nmgood(n,0),nminf(n,0);
    for(int i=0;i<initial.size();i++){
        if (!vis[initial[i]])dfs(gr,initial[i],vis,0,0,disc,highsen,-1,nmgood,infected,nminf);
    }
    
    int mxrem=0;
    for(int i=0;i<n;i++){
        cout<<nmgood[i]<<" ";
        if (nmgood[i]>mxrem){
            mxrem=nmgood[i];
            ans=i;
        }
    }
    cout<<ans<<'\n';
    return ans;

    
        
        
}

int main(){
    vector<vector<int>> gr={};
    vector<int> init={8,4,2,0};
    minMalwareSpread(gr,init);


}